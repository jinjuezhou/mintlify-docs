openapi: 3.0.3
info:
  title: Live Avatar API
  description: API for managing streaming avatars and sessions
  version: 1.0.0
servers:
  - url: https://openapi.akool.com
    description: Production server
security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /api/open/v3/avatar/create:
    post:
      summary: Upload Streaming Avatar
      description: Create a new streaming avatar from a video URL
      tags:
        - Avatar Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAvatarRequest'
            example:
              url: "https://drz0f01yeq1cx.cloudfront.net/1721197444322-leijun000.mp4"
              avatar_id: "HHdEKhn7k7vVBlR5FSi0e"
              name: "My Streaming Avatar"
              type: 2
              url_from: 1
      responses:
        '200':
          description: Avatar created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AvatarDetail'
              example:
                code: 1000
                msg: "ok"
                data:
                  _id: "655ffeada6976ea317087193"
                  disabled: false
                  uid: 1
                  type: 2
                  from: 2
                  status: 1
                  sort: 12
                  create_time: 1700788730000
                  name: "Yasmin in White shirt"
                  avatar_id: "Yasmin_in_White_shirt_20231121"
                  url: "https://drz0f01yeq1cx.cloudfront.net/1700786304161-b574407f-f926-4b3e-bba7-dc77d1742e60-8169.png"
                  modify_url: "https://drz0f01yeq1cx.cloudfront.net/1700786304161-b574407f-f926-4b3e-bba7-dc77d1742e60-8169.png"
                  gender: "female"
                  thumbnailUrl: "https://drz0f01yeq1cx.cloudfront.net/avatar/thumbnail/1700786304161-b574407f-f926-4b3e-bba7-dc77d1742e60-8169.png"
                  crop_arr: []

  /api/open/v4/liveAvatar/avatar/list:
    get:
      summary: Get Streaming Avatar List
      description: Retrieve a list of available streaming avatars
      tags:
        - Avatar Management
      parameters:
        - name: platform
          in: query
          schema:
            type: string
            default: open
            enum: [open, aigc]
          description: Platform type - open for openapi, aigc for akool web app
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - name: size
          in: query
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 1
          description: Number of items per page (max 100)
      responses:
        '200':
          description: List of streaming avatars
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AvatarListResponse'

  /api/open/v4/liveAvatar/avatar/detail:
    get:
      summary: Get Streaming Avatar Detail
      description: Get detailed information about a specific streaming avatar
      tags:
        - Avatar Management
      parameters:
        - name: avatar_id
          in: query
          required: true
          schema:
            type: string
          description: Unique identifier for the streaming avatar
      responses:
        '200':
          description: Avatar details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AvatarDetail'

  /api/open/v4/liveAvatar/session/create:
    post:
      summary: Create Session
      description: Create a new streaming avatar session
      tags:
        - Session Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
            example:
              avatar_id: "dvp_Tristan_cloth2_1080P"
              knowledge_id: "64f8a1b2c3d4e5f6a7b8c9d0"
              duration: 3600
              voice_id: "iP95p4xoKVk53GoZ742B"
              language: "en"
              mode_type: 2
              background_url: "https://example.com/background.jpg"
              stream_type: "agora"
              credentials:
                agora_uid: 100000
                agora_app_id: "your-app-id"
                agora_channel: "your-channel"
                agora_token: "your-token"
              voice_params:
                speed: 1.0
                pron_map:
                  akool: "ai ku er"
                stt_type: "openai_realtime"
                turn_detection:
                  type: "server_vad"
                  threshold: 0.5
                  prefix_padding_ms: 300
                  silence_duration_ms: 500
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SessionResponse'

  /api/open/v4/liveAvatar/session/detail:
    get:
      summary: Get Session Info Result
      description: Get detailed information about a streaming session
      tags:
        - Session Management
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: Session ID from the _id field returned by Create Session
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SessionDetail'

  /api/open/v4/liveAvatar/session/close:
    post:
      summary: Close Session
      description: Close an active streaming session
      tags:
        - Session Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: Session ID from the _id field returned by Create Session
            example:
              id: "6698c9d69cf7b0d61d1b6420"
      responses:
        '200':
          description: Session closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/open/v4/liveAvatar/session/list:
    get:
      summary: Get Session List
      description: Get a list of streaming sessions
      tags:
        - Session Management
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Current page number, default is 1
        - name: size
          in: query
          schema:
            type: integer
            default: 100
            minimum: 1
          description: Number of items per page, default is 100
        - name: status
          in: query
          schema:
            type: integer
            enum: [1, 2, 3, 4]
          description: Session status filter (1:queueing, 2:processing, 3:completed, 4:failed)
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SessionListResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: Your API Key used for request authorization. If both Authorization and x-api-key have values, Authorization will be used first and x-api-key will be discarded.
    BearerAuth:
      type: http
      scheme: bearer
      description: Your API Key used for request authorization. Get Token from authentication/usage#get-the-token

  schemas:
    ApiResponse:
      type: object
      required:
        - code
        - msg
      properties:
        code:
          type: integer
          description: "Interface returns business status code (1000: success)"
          example: 1000
        msg:
          type: string
          description: Interface returns status information
          example: "OK"

    CreateAvatarRequest:
      type: object
      required:
        - url
        - avatar_id
        - name
        - type
        - url_from
      properties:
        url:
          type: string
          description: Avatar resource link. It is recommended that the video be about one minute long, and the avatar in the video content should rotate at a small angle and be clear.
        avatar_id:
          type: string
          pattern: '^[a-zA-Z0-9]+$'
          description: Avatar unique ID, can only contain alphanumeric characters
        name:
          type: string
          description: Avatar display name for easier identification and management
        type:
          type: integer
          enum: [2]
          description: Avatar type 2 represents stream avatar. When type is 2, you need to wait until status is 3 before you can use it. You can get the current status in real time through the Get Avatar Detail API.
        url_from:
          type: integer
          enum: [1, 2]
          description: URL source, 1 means akool and other links, 2 means other third-party links (currently only supports YouTube / TikTok / X / Google Drive)

    AvatarListResponse:
      type: object
      properties:
        count:
          type: integer
          description: Total number of streaming avatars
        result:
          type: array
          items:
            $ref: '#/components/schemas/Avatar'

    AvatarDetail:
      type: object
      properties:
        _id:
          type: string
          description: Internal ID
        uid:
          type: integer
          description: User ID
        type:
          type: integer
          description: Avatar type identifier (2 for streaming avatars)
        from:
          type: integer
          description: Source identifier for the avatar, 2 for official and 3 for user created
        avatar_id:
          type: string
          description: Unique identifier for the streaming avatar
        voice_id:
          type: string
          description: Associated voice model identifier
        name:
          type: string
          description: Display name of the avatar
        url:
          type: string
          description: URL to access the streaming avatar
        thumbnailUrl:
          type: string
          description: URL for the avatar's preview thumbnail
        gender:
          type: string
          description: Avatar's gender designation
        available:
          type: boolean
          description: Indicates if the avatar is currently available for use
        platform:
          type: string
          description: Platform identifier

    Avatar:
      type: object
      properties:
        _id:
          type: string
          description: Internal ID
        uid:
          type: integer
          description: User ID
        type:
          type: integer
          description: Avatar type identifier (2 for streaming avatars)
        from:
          type: integer
          description: Source identifier for the avatar, 2 for official and 3 for user created
        avatar_id:
          type: string
          description: Unique identifier for the streaming avatar
        voice_id:
          type: string
          description: Associated voice model identifier
        name:
          type: string
          description: Display name of the avatar
        url:
          type: string
          description: URL to access the streaming avatar
        thumbnailUrl:
          type: string
          description: URL for the avatar's preview thumbnail
        gender:
          type: string
          description: Avatar's gender designation
        available:
          type: boolean
          description: Indicates if the avatar is currently available for use

    CreateSessionRequest:
      type: object
      required:
        - avatar_id
      properties:
        avatar_id:
          type: string
          description: Digital human model in real-time avatar. If you want to use a custom uploaded video, you need to call the avatar/create interface to create a template. This process takes some time to process. You can check the processing status through the avatar/detail interface. When status=3, you can use the avatar_id field to pass it in.
        duration:
          type: number
          maximum: 3600
          description: "Session duration in seconds (max: 3600). Credits are pre-charged for the full duration, but any unused credits will be refunded after the session ends. Rates depend on your subscription plan."
        knowledge_id:
          type: string
          description: Knowledge base ID to provide context for AI responses. Create and manage knowledge bases using the Knowledge Base API. When provided, the AI will use documents and URLs from the knowledge base to enhance response accuracy.
        voice_id:
          type: string
          description: Voice ID to change avatar's voice. Get valid IDs from Voice List API
        voice_url:
          type: string
          description: Custom voice model URL. Get valid URLs from Voice List API
        language:
          type: string
          description: Language code to use for the session. Get valid codes from Language List API
        mode_type:
          type: integer
          enum: [1, 2]
          description: Avatar interaction style. "1" = Retelling (avatar repeats content), "2" = Dialogue (avatar engages in conversation)
        background_url:
          type: string
          description: URL of background image/video for avatar scene
        voice_params:
          $ref: '#/components/schemas/VoiceParams'
        stream_type:
          type: string
          enum: [agora, livekit, trtc]
          default: agora
          description: Stream type to use for the session. "agora" = Agora (default), "livekit" = Livekit, "trtc" = TRTC
        credentials:
          $ref: '#/components/schemas/Credentials'

    VoiceParams:
      type: object
      properties:
        speed:
          type: number
          minimum: 0.8
          maximum: 1.2
          default: 1.0
          description: Controls the speed of the generated speech. Values range from 0.8 to 1.2, with 1.0 being the default speed.
        pron_map:
          type: object
          additionalProperties:
            type: string
          description: "Pronunciation mapping for custom words. Example: pron_map with akool mapped to ai ku er"
        stt_type:
          type: string
          enum: [openai_realtime]
          description: Speech-to-text type. "openai_realtime" = OpenAI Realtime
        turn_detection:
          $ref: '#/components/schemas/TurnDetection'

    TurnDetection:
      type: object
      properties:
        type:
          type: string
          enum: [server_vad, semantic_vad]
          description: Turn detection type. "server_vad" = Server VAD, "semantic_vad" = Semantic VAD
        threshold:
          type: number
          minimum: 0
          maximum: 1
          description: Activation threshold (0 to 1). A higher threshold will require louder audio to activate the model, and thus might perform better in noisy environments. Available when type is "server_vad".
        prefix_padding_ms:
          type: integer
          description: Amount of audio (in milliseconds) to include before the VAD detected speech. Available when type is "server_vad".
        silence_duration_ms:
          type: integer
          description: Duration of silence (in milliseconds) to detect speech stop. With shorter values turns will be detected more quickly. Available when type is "server_vad".

    Credentials:
      type: object
      properties:
        # Agora credentials
        agora_uid:
          type: number
          description: Agora SDK user ID (required when stream_type is "agora")
        agora_app_id:
          type: string
          description: Agora App ID (optional when stream_type is "agora")
        agora_channel:
          type: string
          description: Agora channel name (required when stream_type is "agora")
        agora_token:
          type: string
          description: Agora access token (required when stream_type is "agora")
        
        # LiveKit credentials
        livekit_url:
          type: string
          description: LiveKit server URL (required when stream_type is "livekit")
        livekit_token:
          type: string
          description: LiveKit access token (required when stream_type is "livekit")
        livekit_room_name:
          type: string
          description: LiveKit room name (optional when stream_type is "livekit")
        livekit_server_identity:
          type: string
          description: LiveKit server identity (optional when stream_type is "livekit")
        livekit_client_identity:
          type: string
          description: LiveKit client identity (optional when stream_type is "livekit")
        
        # TRTC credentials
        trtc_sdk_app_id:
          type: number
          description: TRTC App ID (required when stream_type is "trtc")
        trtc_sdk_room_id:
          type: string
          description: TRTC room ID (required when stream_type is "trtc")
        trtc_sdk_user_id:
          type: string
          description: TRTC user ID (required when stream_type is "trtc")
        trtc_sdk_user_sig:
          type: string
          description: TRTC authentication token (userSig) (required when stream_type is "trtc")

    SessionResponse:
      type: object
      properties:
        _id:
          type: string
          description: Session ID
        uid:
          type: integer
          description: User ID
        type:
          type: integer
          description: Session type
        status:
          type: integer
          enum: [1, 2, 3, 4]
          description: Session status (1:queueing, 2:processing, 3:completed, 4:failed)
        stream_type:
          type: string
          description: Stream type used for the session
        credentials:
          $ref: '#/components/schemas/Credentials'

    SessionDetail:
      type: object
      properties:
        _id:
          type: string
          description: Session ID
        uid:
          type: integer
          description: User ID
        type:
          type: integer
          description: Session type
        status:
          type: integer
          enum: [1, 2, 3, 4]
          description: Session status (1:queueing, 2:processing, 3:completed, 4:failed)
        stream_type:
          type: string
          description: Stream type used for the session
        credentials:
          $ref: '#/components/schemas/Credentials'

    SessionListResponse:
      type: object
      properties:
        count:
          type: integer
          description: Total number of sessions
        result:
          type: array
          items:
            $ref: '#/components/schemas/SessionResponse'
